#version 330 core
out vec4 frag_color;

in vec2 pass_texcoords;

uniform sampler2D image;
uniform bool horizontal;

uniform float weight[5] = float[] (0.2270270270, 0.1945945946, 0.1216216216, 0.0540540541, 0.0162162162);


// automatically generated by GenerateGaussFunctionCode in GaussianBlur.h
vec3 GaussianBlur(sampler2D tex0, vec2 centreUV, vec2 pixelOffset)
{
    vec3 colOut = vec3( 0, 0, 0 );
	/*
    // Kernel width 11 x 11
    const int stepCount = 3;
    const float gWeights[stepCount] ={
       0.33023,
       0.15701,
       0.01276
    };
    const float gOffsets[stepCount] ={
       0.62184,
       2.27310,
       4.14653
    }; */
	const int stepCount = 1;
    //
    const float gWeights[stepCount] ={
       0.49551
    };
    const float gOffsets[stepCount] ={
       0.36786
    };
    for( int i = 0; i < stepCount; i++ )
    {
        vec2 texCoordOffset = gOffsets[i] * pixelOffset;
        vec3 col = texture( tex0, centreUV + texCoordOffset ).xyz + 
			       texture( tex0, centreUV - texCoordOffset ).xyz;
        colOut += gWeights[i] * col; 
    }

    return colOut;
}

void main()
{
    vec2 tex_offset = 1.0 / textureSize(image, 0); // gets size of single texel

    vec3 result;
    if(horizontal)
		result = GaussianBlur(image, pass_texcoords, vec2(tex_offset.x, 0.0));
    else
		result = GaussianBlur(image, pass_texcoords, vec2(0.0, tex_offset.y));

    frag_color = vec4(result, 1.0);
}